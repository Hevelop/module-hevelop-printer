<?php

namespace Hevelop\Printer\Block\Product;

use Hevelop\Printer\Helper\Data as PdfHelper;
use Magento\Framework\View\Element\Template;
use Magento\Framework\Registry;
use \Magento\Catalog\Model\ProductRepository;
use Magento\Store\Model\StoreManagerInterface;
use Magento\Framework\App\Filesystem\DirectoryList;
use Magento\Framework\Filesystem;

/**
 * Class View
 * @package Hevelop\Printer\Block\Product
 */
class View extends \Magento\Framework\View\Element\Template
{

    /**
     * @var \Hevelop\Printer\Helper\Data
     */
    public $_pdfHelper;

    public $_coreRegistry;

    public $_productRepository;

    public $_storeManagerInterface;

    protected $_filesystem;

    public function __construct(
        Template\Context $context,
        PdfHelper $pdfHelper,
        Registry $coreRegistry,
        ProductRepository $productRepository,
        StoreManagerInterface $storeManagerInterface,
        Filesystem $filesystem,
        array $data = [])
    {
        $this->_pdfHelper = $pdfHelper;
        $this->_coreRegistry = $coreRegistry;
        $this->_productRepository = $productRepository;
        $this->_storeManagerInterface = $storeManagerInterface;
        $this->_filesystem = $filesystem;
        parent::__construct($context, $data);
    }


    public function getLogoSrc()
    {
        return $this->_pdfHelper->getLogoSrc();
    }

    /**
     * @return int
     */
    public function getCurrentStoreId()
    {
        $currentStore = $this->_storeManagerInterface->getStore();
        $currentStoreId = $currentStore->getId();

        return $currentStoreId;
    }


    /**
     * @return mixed
     */
    public function getProductId()
    {
        return $this->_coreRegistry->registry('printer_product_id');
    }

    /**
     * @param $product
     * @return string
     */
    public function getProductImageSrc($product)
    {
//       return $this->_storeManager->getStore()->getBaseUrl(\Magento\Framework\UrlInterface::URL_TYPE_MEDIA ) . 'catalog/product' . $product->getMediaGalleryImages()->getFirstItem()->getFile();

        return $this->getMediaPath() . 'catalog/product' . $product->getMediaGalleryImages()->getFirstItem()->getFile();
    }


    /**
     * @return string
     */
    public function getMediaPath(){
        return $this->_filesystem->getDirectoryRead(DirectoryList::MEDIA)->getAbsolutePath();
    }

    /**
     * @return \Magento\Catalog\Api\Data\ProductInterface|mixed
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     */
    public function getProduct()
    {

        $storeId = $this->getCurrentStoreId();

        $product = $this->_productRepository->getById($this->getProductId(), false, $storeId);

        $this->_coreRegistry->register('product', $product);

        return $product;

    }

    public function _afterToHtml($html)
    {
        $this->_pdfHelper->generatePdf($html, $this->_coreRegistry->registry('product'));
        return parent::_afterToHtml($html); // TODO: Change the autogenerated stub
    }

}